{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  DELETE_LIST_NOTED: \"DELETE_LIST_NOTED\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\"\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n  _s();\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    markedListforDeletion: null\n  });\n\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markedListforDeletion: store.markedListforDeletion\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markedListforDeletion: store.markedListforDeletion\n          });\n        }\n      // CREATE A NEW LIST\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            markedListforDeletion: store.markedListforDeletion\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markedListforDeletion: store.markedListforDeletion\n          });\n        }\n      // PREPARE TO DELETE A LIST\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markedListforDeletion: payload\n          });\n        }\n      // UPDATE A LIST\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markedListforDeletion: store.markedListforDeletion\n          });\n        }\n      // START EDITING A LIST NAME\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            markedListforDeletion: store.markedListforDeletion\n          });\n        }\n      case GlobalStoreActionType.DELETE_MARKED_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            markedListforDeletion: null\n          });\n        }\n      default:\n        return store;\n    }\n  };\n\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  store.markListForDeletion = function (id) {\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: id\n    });\n    console.log(\"list marked for deletion\" + id);\n    store.openDeleteListModal();\n  };\n  store.deleteList = function (id) {\n    async function deleteList(id) {\n      let response = await api.deletePlaylistById(id);\n      if (response.data.success) {\n        store.loadIdNamePairs();\n        const newIdNamePairs = store.idNamePairs.filter(idNamePair => idNamePair !== id);\n        storeReducer({\n          type: GlobalStoreActionType.DELETE_MARKED_LIST,\n          payload: newIdNamePairs\n        });\n      }\n    }\n    deleteList(id);\n  };\n  store.deleteMarkedList = function () {\n    store.deleteList(store.markedListforDeletion);\n    store.closeDeleteListModal();\n  };\n  store.openDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n  store.closeDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playist;\n        playlist.name = newName;\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncChangeListName(id);\n  };\n\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n    asyncSetCurrentList(id);\n  };\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n  store.createNewList = function () {\n    let list_inp = {\n      name: \"NewSong\",\n      songs: []\n    };\n    async function async_Create_play_lists() {\n      const dBpayload = list_inp;\n      //get response\n      await api.create_play_lists(dBpayload);\n      storeReducer({\n        type: GlobalStoreActionType.CREATE_NEW_LIST,\n        payload: dBpayload\n      });\n      store.history.push(\"/playlist/\" + list_inp._id);\n    }\n    async_Create_play_lists();\n  };\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n  store.redo = function () {\n    tps.doTransaction();\n  };\n\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n\n  // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n  return {\n    store,\n    storeReducer\n  };\n};\n_s(useGlobalStore, \"iqNG7KCXIXvgpN3yLxjwFDbXXbA=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","MARK_LIST_FOR_DELETION","DELETE_LIST_NOTED","SET_LIST_NAME_EDIT_ACTIVE","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","markedListforDeletion","storeReducer","action","type","payload","playlist","DELETE_MARKED_LIST","markListForDeletion","id","console","log","openDeleteListModal","deleteList","response","deletePlaylistById","data","success","loadIdNamePairs","newIdNamePairs","filter","idNamePair","deleteMarkedList","closeDeleteListModal","modal","document","getElementById","classList","add","remove","changeListName","newName","asyncChangeListName","getPlaylistById","playist","name","updateList","updatePlaylistById","_id","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","asyncLoadIdNamePairs","setCurrentList","asyncSetCurrentList","history","push","getPlaylistSize","songs","length","createNewList","list_inp","async_Create_play_lists","dBpayload","create_play_lists","undo","undoTransaction","redo","doTransaction","setlistNameActive"],"sources":["C:/Users/Sadashiva Yalla/Desktop/Playlister_HW3/Playlister_HW3-main/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    DELETE_LIST_NOTED:\"DELETE_LIST_NOTED\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        markedListforDeletion: null\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markedListforDeletion: store.markedListforDeletion\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markedListforDeletion: store.markedListforDeletion\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    listNameActive: false,\n                    markedListforDeletion: store.markedListforDeletion\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markedListforDeletion: store.markedListforDeletion\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markedListforDeletion: payload\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markedListforDeletion: store.markedListforDeletion\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true,\n                    markedListforDeletion: store.markedListforDeletion\n                });\n            }\n            \n            \n            case GlobalStoreActionType.DELETE_MARKED_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true,\n                    markedListforDeletion: null\n                });\n            }\n            default:\n                return store;\n\n        \n            }\n    }\n    \n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n    store.markListForDeletion = function (id) {\n        storeReducer({\n            type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n            payload: id\n        });\n        console.log(\"list marked for deletion\" + id);\n        store.openDeleteListModal();\n    }\n\n    store.deleteList = function(id) {\n        async function deleteList(id) {\n            let response = await api.deletePlaylistById(id);\n            if(response.data.success) {\n                store.loadIdNamePairs();\n                const newIdNamePairs = store.idNamePairs.filter(idNamePair => idNamePair !== id);\n                storeReducer({\n                    type: GlobalStoreActionType.DELETE_MARKED_LIST,\n                    payload: newIdNamePairs\n                });\n            }\n        }\n        deleteList(id);\n    }\n\n    store.deleteMarkedList = function() {\n        store.deleteList(store.markedListforDeletion);\n        store.closeDeleteListModal();\n    }\n\n    store.openDeleteListModal = function () {\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.add(\"is-visible\");\n    }\n\n    store.closeDeleteListModal = function () {\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n\n    store.createNewList = function() {\n        let list_inp = {name:\"NewSong\",songs:[]};\n        async function async_Create_play_lists()\n        {\n            \n            const dBpayload = list_inp;\n            //get response\n            await api.create_play_lists(dBpayload);\n            storeReducer\n            ({\n                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                payload: dBpayload\n            });\n            store.history.push(\"/playlist/\"+list_inp._id);\n        }\n        async_Create_play_lists();\n    }\n\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setlistNameActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}