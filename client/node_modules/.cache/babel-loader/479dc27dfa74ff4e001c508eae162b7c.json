{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  EMPTY_ALL: \"EMPTY_ALL\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\"\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n  _s();\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    listToBeDeleted: null\n  });\n\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listToBeDeleted: store.listToBeDeleted\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listToBeDeleted: store.listToBeDeleted\n          });\n        }\n      // CREATE A NEW LIST\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            listToBeDeleted: store.listToBeDeleted\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listToBeDeleted: store.listToBeDeleted\n          });\n        }\n      // PREPARE TO DELETE A LIST\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listToBeDeleted: payload\n          });\n        }\n      // UPDATE A LIST\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listToBeDeleted: store.listToBeDeleted\n          });\n        }\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listToBeDeleted: null\n          });\n        }\n      // START EDITING A LIST NAME\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            listToBeDeleted: null\n          });\n        }\n      case GlobalStoreActionType.EMPTY_ALL:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            listToBeDeleted: null\n          });\n        }\n      default:\n        return store;\n    }\n  };\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncChangeListName(id);\n  };\n\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n    asyncSetCurrentList(id);\n  };\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n  store.redo = function () {\n    tps.doTransaction();\n  };\n\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n  // Custom Functions beginning from here\n  store.editSong = inputObj => {};\n  store.createNewList = function () {\n    let emptyValue = {\n      \"name\": \"Untitled\",\n      \"songs\": []\n    };\n    async function asyncCreateNewList() {\n      var resp = await api.createPlaylist(emptyValue);\n      if (resp.data.success) {\n        var toBePsushed = resp.data.playlist;\n        storeReducer({\n          type: GlobalStoreActionType.CREATE_NEW_LIST,\n          payload: toBePsushed\n        });\n        store.history.push(\"/playlist/\" + toBePsushed._id);\n      }\n    }\n    asyncCreateNewList();\n  };\n  store.deleteList = function () {\n    async function deleteListById() {\n      let response = await api.deletePlay_List(store.listToBeDeleted);\n      if (response.data.success) {\n        store.loadIdNamePairs();\n        store.history.push(\"/\");\n      }\n    }\n    deleteListById();\n  };\n  store.ListObjectforDeletion = function (id) {\n    console.log(id);\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: id\n    });\n    store.OpenDelete_ListModal();\n  };\n  store.deleteMarkedList = function () {\n    console.log(\"Delete marked list\");\n    store.Delete_PlayList(store.listMarkedForDeletion);\n    store.hideDeleteListModal();\n  };\n  store.OpenDelete_ListModal = function () {\n    let del_modal = document.getElementById(\"delete-list-modal\");\n    del_modal.classList.add(\"is-visible\");\n  };\n  store.CloseDelete_ListModal = function () {\n    let del_modal = document.getElementById(\"delete-list-modal\");\n    del_modal.classList.remove(\"is-visible\");\n  };\n  store.addSong = function () {\n    async function asyncAddSong() {\n      let s = store.currentList;\n      s.songs.push({\n        title: \"untitled\",\n        artist: \"unknown\",\n        youTubeId: \"dQw4w9WgXcQ\"\n      });\n      storeReducer({\n        type: GlobalStoreActionType.SET_CURRENT_LIST,\n        payload: s\n      });\n      await api.updatePlay_List(store.currentList._id, s);\n    }\n    asyncAddSong();\n  };\n  store.deleteSong(indexForDel);\n  {\n    async function asyncDeleteSong() {\n      let s = store.currentList;\n      s.songs.splice(1, indexForDel);\n      await api.updatePlay_List(store.currentList._id, s);\n    }\n    asyncDeleteSong();\n  }\n\n  // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n  return {\n    store,\n    storeReducer\n  };\n};\n_s(useGlobalStore, \"kHQphdyJKfY4K0GvIFcnRkvl2F4=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","MARK_LIST_FOR_DELETION","EMPTY_ALL","SET_LIST_NAME_EDIT_ACTIVE","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","listToBeDeleted","storeReducer","action","type","payload","playlist","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","data","success","name","updateList","updatePlaylistById","_id","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","loadIdNamePairs","asyncLoadIdNamePairs","console","log","setCurrentList","asyncSetCurrentList","history","push","getPlaylistSize","songs","length","undo","undoTransaction","redo","doTransaction","setlistNameActive","editSong","inputObj","createNewList","emptyValue","asyncCreateNewList","resp","createPlaylist","toBePsushed","deleteList","deleteListById","deletePlay_List","ListObjectforDeletion","OpenDelete_ListModal","deleteMarkedList","Delete_PlayList","listMarkedForDeletion","hideDeleteListModal","del_modal","document","getElementById","classList","add","CloseDelete_ListModal","remove","addSong","asyncAddSong","s","title","artist","youTubeId","updatePlay_List","deleteSong","indexForDel","asyncDeleteSong","splice"],"sources":["C:/Users/Sadashiva Yalla/Desktop/Playlister_HW3/Playlister_HW3-main/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\", \n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    EMPTY_ALL: \"EMPTY_ALL\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        listToBeDeleted : null,\n\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listToBeDeleted : store.listToBeDeleted\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listToBeDeleted : store.listToBeDeleted\n\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    listNameActive: false,\n                    listToBeDeleted : store.listToBeDeleted\n\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listToBeDeleted : store.listToBeDeleted\n\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listToBeDeleted : payload\n\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listToBeDeleted : store.listToBeDeleted\n\n                });\n            }\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listToBeDeleted: null\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true,\n                    listToBeDeleted: null\n                });\n            }\n            case GlobalStoreActionType.EMPTY_ALL: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    listToBeDeleted: null\n                });\n            }\n            \n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    \n\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setlistNameActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }      \n    // Custom Functions beginning from here\n    store.editSong = (inputObj) =>\n    {\n\n    }\n    store.createNewList = function (){\n\n\t\tlet emptyValue = \n\t\t{ \n        \"name\": \"Untitled\",\n        \"songs\": []\n\t\t};\n        async function asyncCreateNewList() \n\t\t{\n            var resp = await api.createPlaylist(emptyValue)\n            if (resp.data.success) \n\t\t\t{\n                var toBePsushed = resp.data.playlist;\n                storeReducer\n\t\t\t\t({\n                    type: GlobalStoreActionType.CREATE_NEW_LIST,\n                    payload: toBePsushed\n                });\n                store.history.push(\"/playlist/\" + toBePsushed._id);\n            }\n        }\n        asyncCreateNewList();\n    }\n\n    store.deleteList = function () {\n        async function deleteListById()\n         {\n            let response = await api.deletePlay_List(store.listToBeDeleted);\n            if (response.data.success) {\n                store.loadIdNamePairs();\n                store.history.push(\"/\");\n            }\n        }\n        deleteListById();\n    }\n    \n    store.ListObjectforDeletion = function (id) {\n        console.log(id);\n        storeReducer({\n            type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n            payload: id,\n        });\n        store.OpenDelete_ListModal();\n    }\n    store.deleteMarkedList = function() {\n        console.log(\"Delete marked list\");\n        store.Delete_PlayList(store.listMarkedForDeletion);\n        store.hideDeleteListModal();\n    }\n    store.OpenDelete_ListModal = function() {\n        let del_modal = document.getElementById(\"delete-list-modal\");\n        del_modal.classList.add(\"is-visible\");\n    }\n    store.CloseDelete_ListModal = function() {\n        let del_modal = document.getElementById(\"delete-list-modal\");\n        del_modal.classList.remove(\"is-visible\");\n    }\n    store.addSong = function () {\n        async function asyncAddSong() {\n            let s = store.currentList;\n            s.songs.push( {\n                title: \"untitled\",\n                artist: \"unknown\",\n                youTubeId: \"dQw4w9WgXcQ\"\n            })\n\n            storeReducer({\n                type: GlobalStoreActionType.SET_CURRENT_LIST,\n                payload: s\n            });\n            await api.updatePlay_List(store.currentList._id,s)\n        }\n        asyncAddSong();\n    }\n    store.deleteSong(indexForDel)\n    {\n        async function asyncDeleteSong() {\n            let s = store.currentList;\n            s.songs.splice(1,indexForDel);\n            \n            await api.updatePlay_List(store.currentList._id,s)\n        }\n        asyncDeleteSong();\n    }\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}