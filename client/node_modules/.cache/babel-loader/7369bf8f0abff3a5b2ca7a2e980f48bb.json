{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  EMPTY_ALL: \"EMPTY_ALL\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\"\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n  _s();\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    markListDeletionIndex: null\n  });\n\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListDeletionIndex: store.markListDeletionIndex\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListDeletionIndex: store.markListDeletionIndex\n          });\n        }\n      // CREATE A NEW LIST\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            markListDeletionIndex: store.markListDeletionIndex\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListDeletionIndex: store.markListDeletionIndex\n          });\n        }\n      // PREPARE TO DELETE A LIST\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListDeletionIndex: payload\n          });\n        }\n      // UPDATE A LIST\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListDeletionIndex: store.markListDeletionIndex\n          });\n        }\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListForDeletion: null\n          });\n        }\n      // START EDITING A LIST NAME\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            markListForDeletion: null\n          });\n        }\n      case GlobalStoreActionType.EMPTY_ALL:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            markListForDeletion: null\n          });\n        }\n      default:\n        return store;\n    }\n  };\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playist;\n        playlist.name = newName;\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncChangeListName(id);\n  };\n\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n    asyncSetCurrentList(id);\n  };\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n  store.createNewList = function () {\n    async function async_Create_play_lists() {\n      let list_inp = {\n        name: \"NewSong\",\n        songs: []\n      };\n      const dBpayload = list_inp;\n      //get response\n      await api.create_play_lists(dBpayload);\n      storeReducer({\n        type: GlobalStoreActionType.CREATE_NEW_LIST,\n        payload: dBpayload\n      });\n      store.history.push(\"/playlist/\" + list_inp._id);\n    }\n    async_Create_play_lists();\n  };\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n  store.redo = function () {\n    tps.doTransaction();\n  };\n\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n  store.markListForDeletion = function (id) {\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: id\n    });\n    console.log(\"list marked for deletion\" + id);\n    store.openDeleteListModal();\n  };\n  store.deleteList = function (id) {\n    async function deleteList(id) {\n      let response = await api.deletePlayList(id);\n      if (response.data.success) {\n        store.loadIdNamePairs();\n        const newIdNamePairs = store.idNamePairs.filter(idNamePair => idNamePair !== id);\n        storeReducer({\n          type: GlobalStoreActionType.DELETE_MARKED_LIST,\n          payload: newIdNamePairs\n        });\n      }\n    }\n    deleteList(id);\n  };\n  store.deleteMarkedList = function () {\n    store.deleteList(store.listMarkedForDeletion);\n    store.closeDeleteListModal();\n  };\n  store.openDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n  store.closeDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n  store.markListForDeletion = function (id) {\n    console.log(\"mark list\");\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: id\n    });\n    store.showDeleteListModal();\n  };\n  store.deletePlaylist = id => {\n    // GET THE LIST\n    async function asyncDeletePlaylist(id) {\n      let response = await api.getPlaylistById(id);\n      let playlist = response.data.playlist;\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n          payload: {}\n        });\n        async function deleteList(playlist) {\n          response = await api.deletePlaylistById(playlist._id);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        deleteList(playlist);\n      }\n    }\n    asyncDeletePlaylist(id);\n  };\n  store.deleteMarkedList = function () {\n    console.log(\"Delete marked list\");\n    store.deletePlayList('63480fecab74d54910820a7b');\n    // store.deletePlayList(store.listMarkedForDeletion);\n    store.hideDeleteListModal();\n  };\n  store.showDeleteListModal = function () {\n    console.log(\"show list\");\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n  store.hideDeleteListModal = function () {\n    console.log(\"hide list\");\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n\n  // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n  return {\n    store,\n    storeReducer\n  };\n};\n_s(useGlobalStore, \"p5bBw8xKyIYEi6ep8VdMUiREflM=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","MARK_LIST_FOR_DELETION","EMPTY_ALL","SET_LIST_NAME_EDIT_ACTIVE","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","markListDeletionIndex","storeReducer","action","type","payload","playlist","markListForDeletion","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","data","success","playist","name","updateList","updatePlaylistById","_id","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","loadIdNamePairs","asyncLoadIdNamePairs","console","log","setCurrentList","asyncSetCurrentList","history","push","getPlaylistSize","songs","length","createNewList","async_Create_play_lists","list_inp","dBpayload","create_play_lists","undo","undoTransaction","redo","doTransaction","setlistNameActive","openDeleteListModal","deleteList","deletePlayList","newIdNamePairs","filter","idNamePair","DELETE_MARKED_LIST","deleteMarkedList","listMarkedForDeletion","closeDeleteListModal","modal","document","getElementById","classList","add","remove","showDeleteListModal","deletePlaylist","asyncDeletePlaylist","deletePlaylistById","hideDeleteListModal"],"sources":["C:/Users/Sadashiva Yalla/Desktop/Playlister_HW3/Playlister_HW3-main/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\", \n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    EMPTY_ALL: \"EMPTY_ALL\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        markListDeletionIndex : null,\n\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markListDeletionIndex : store.markListDeletionIndex\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markListDeletionIndex : store.markListDeletionIndex\n\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    listNameActive: false,\n                    markListDeletionIndex : store.markListDeletionIndex\n\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markListDeletionIndex : store.markListDeletionIndex\n\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markListDeletionIndex : payload\n\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markListDeletionIndex : store.markListDeletionIndex\n\n                });\n            }\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markListForDeletion: null\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true,\n                    markListForDeletion: null\n                });\n            }\n            case GlobalStoreActionType.EMPTY_ALL: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    markListForDeletion: null\n                });\n            }\n            \n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    \n\n    store.createNewList = function() {\n        async function async_Create_play_lists()\n        {\n            let list_inp = {name:\"NewSong\",songs:[]};\n            const dBpayload = list_inp;\n            //get response\n            await api.create_play_lists(dBpayload);\n            storeReducer\n            ({\n                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                payload: dBpayload\n            });\n            store.history.push(\"/playlist/\"+list_inp._id);\n        }\n        async_Create_play_lists();\n    }\n\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setlistNameActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }      \n    store.markListForDeletion = function (id) {\n        storeReducer({\n            type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n            payload: id\n        });\n        console.log(\"list marked for deletion\" + id);\n        store.openDeleteListModal();\n    }\n\n    store.deleteList = function(id) {\n        async function deleteList(id) {\n            let response = await api.deletePlayList(id);\n            if(response.data.success) {\n                store.loadIdNamePairs();\n                const newIdNamePairs = store.idNamePairs.filter(idNamePair => idNamePair !== id);\n                storeReducer({\n                    type: GlobalStoreActionType.DELETE_MARKED_LIST,\n                    payload: newIdNamePairs\n                });\n            }\n        }\n        deleteList(id);\n    }\n\n    store.deleteMarkedList = function() {\n        store.deleteList(store.listMarkedForDeletion);\n        store.closeDeleteListModal();\n    }\n\n    store.openDeleteListModal = function () {\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.add(\"is-visible\");\n    }\n\n    store.closeDeleteListModal = function () {\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n    store.markListForDeletion = function (id) {\n        console.log(\"mark list\");\n        storeReducer({\n            type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n            payload: id,\n        });\n        store.showDeleteListModal();\n    }\n\n    store.deletePlaylist = (id) => {\n        // GET THE LIST\n        async function asyncDeletePlaylist(id) {\n          let response = await api.getPlaylistById(id);\n          let playlist = response.data.playlist;\n          if (response.data.success) {\n            storeReducer({\n              type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n              payload: {},\n            });\n            async function deleteList(playlist) {\n              response = await api.deletePlaylistById(playlist._id);\n              if (response.data.success) {\n                async function getListPairs(playlist) {\n                  response = await api.getPlaylistPairs();\n                  if (response.data.success) {\n                    let pairsArray = response.data.idNamePairs;\n                    storeReducer({\n                      type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                      payload: {\n                        idNamePairs: pairsArray,\n                        playlist: playlist,\n                      },\n                    });\n                  }\n                }\n                getListPairs(playlist);\n              }\n            }\n            deleteList(playlist);\n          }\n        }\n        asyncDeletePlaylist(id);\n      };\n    store.deleteMarkedList = function() {\n        console.log(\"Delete marked list\");\n        store.deletePlayList('63480fecab74d54910820a7b');\n        // store.deletePlayList(store.listMarkedForDeletion);\n        store.hideDeleteListModal();\n    }\n    store.showDeleteListModal = function() {\n        console.log(\"show list\");\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.add(\"is-visible\");\n    }\n    store.hideDeleteListModal = function() {\n        console.log(\"hide list\");\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}